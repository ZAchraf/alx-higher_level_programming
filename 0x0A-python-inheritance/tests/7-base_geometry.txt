==========================
``7-base_geometry`` module
==========================


Import function :
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Class Type:
    >>> bg = BaseGeometry()
    >>> type(bg) == BaseGeometry
    True


area() 
-------
area is an instance:
    >>> type(BaseGeometry.__dict__['area'])
    <class 'function'>

area called via class, no args:
    >>> bg.__class__.area()
    Traceback (most recent call last):
    TypeError: area() missing 1 required positional argument: 'self'

args test, one arg:
    >>> bg.area(10)
    Traceback (most recent call last):
    TypeError: area() takes 1 positional argument but 2 were given

area normal test:
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented


integer_validator()
-------------------
integer_validator is instance:
    >>> type(BaseGeometry.__dict__['integer_validator'])
    <class 'function'>

integer_validator called by class, no args:
    >>> bg.__class__.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 3 required positional arguments: 'self', 'name', and 'value'

arg test, zero arg:
    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
    
arg test three args:
    >>> bg.integer_validator(1, 1, 1)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

float.0 value:
    >>> bg.integer_validator("foo", 3.0)
    Traceback (most recent call last):
    TypeError: foo must be an integer

float.x value:
    >>> bg.integer_validator("arg", 3.14)
    Traceback (most recent call last):
    TypeError: arg must be an integer

string value:
    >>> bg.integer_validator("Bar", "bar")
    Traceback (most recent call last):
    TypeError: Bar must be an integer

bool value:
    >>> bg.integer_validator("zar", True)
    Traceback (most recent call last):
    TypeError: zar must be an integer

list value:
    >>> bg.integer_validator("a", [1])
    Traceback (most recent call last):
    TypeError: a must be an integer

None value:
    >>> bg.integer_validator("foo", None)
    Traceback (most recent call last):
    TypeError: foo must be an integer

0 value:
    >>> bg.integer_validator("key", 0)
    Traceback (most recent call last):
    ValueError: key must be greater than 0

Only negative values:
    >>> bg.integer_validator("key", -1000)
    Traceback (most recent call last):
    ValueError: key must be greater than 0

value:
    >>> bg.integer_validator("key", 98)
    
value 2:
    >>> bg.integer_validator("key", 1)

Empty string:
    >>> bg.integer_validator("", 1)

empty string:
    >>> bg.integer_validator(None, 1)

Using tuple:
    >>> bg.integer_validator("Foo", (1, 2))
    Traceback (most recent call last):
    TypeError: Foo must be an integer

Using dic:
    >>> bg.integer_validator("Foo", {1, 2})
    Traceback (most recent call last):
    TypeError: Foo must be an integer
